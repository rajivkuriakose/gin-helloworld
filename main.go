package main

import (
	"encoding/json"
	"net/http"
	"os"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"     // swagger embed files
	ginSwagger "github.com/swaggo/gin-swagger" // gin-swagger middleware
)

//TODO fix below
//	_ "github.com/rajivkuriakose/gin-helloworld/docs" // docs is generated by Swag CLI, you have to import it.
// sh-3.2$ go run main.go
// go: warning: ignoring go.mod in $GOPATH /Users/rkuriakose/go
// main.go:9:2: no required module provides package github.com/rajivkuriakose/gin-helloworld/docs; to add it:
//         go get github.com/rajivkuriakose/gin-helloworld/docs
// sh-3.2$ gin-helloworld
// sh: gin-helloworld: command not found

// album represents data about a record album.
// @title Album API
// @version 1.0
// @description This is a sample server for managing albums.
// @termsOfService http://swagger.io/terms/
// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:8080
// @BasePath /
type album struct {
    ID     string  `json:"id"`
    Title  string  `json:"title"`
    Artist string  `json:"artist"`
    Price  float64 `json:"price"`
}

var albums []album

func init() {
    albums = make([]album, 0)
    file, err := os.ReadFile("albums.json")
    if err != nil {
        panic(err)
    }
    err = json.Unmarshal(file, &albums)
    if err != nil {
        panic(err)
    }
}

// @Summary Get all albums
// @Description Get all albums
// @Tags albums
// @Accept  json
// @Produce  json
// @Success 200 {array} album
// @Router /albums [get]
func getAlbums(c *gin.Context) {
    c.JSON(http.StatusOK, albums)
}

// @Summary Get album by ID
// @Description Get album by ID
// @Tags albums
// @Accept  json
// @Produce  json
// @Param id path string true "Album ID"
// @Success 200 {object} album
// @Failure 404 {object} gin.H{"message": "album not found"}
// @Router /albums/{id} [get]
func getAlbumByID(c *gin.Context) {
    id := c.Param("id")
    for _, a := range albums {
        if a.ID == id {
            c.JSON(http.StatusOK, a)
            return
        }
    }
    c.JSON(http.StatusNotFound, gin.H{"message": "album not found"})
}

// @Summary Add a new album
// @Description Add a new album
// @Tags albums
// @Accept  json
// @Produce  json
// @Param album body album true "Album"
// @Success 201 {object} album
// @Router /albums [post]
func postAlbums(c *gin.Context) {
    var newAlbum album

    // Bind JSON to newAlbum
    if err := c.BindJSON(&newAlbum); err != nil {
        return
    }

    albums = append(albums, newAlbum)
    c.JSON(http.StatusCreated, newAlbum)
}

// @Summary Delete an album
// @Description Delete an album
// @Tags albums
// @Accept  json
// @Produce  json
// @Param id path string true "Album ID"
// @Success 200 {object} gin.H{"message": "album deleted"}
// @Failure 404 {object} gin.H{"message": "album not found"}
// @Router /albums/{id} [delete]
func deleteAlbum(c *gin.Context) {
    id := c.Param("id")
    for i, a := range albums {
        if a.ID == id {
            albums = append(albums[:i], albums[i+1:]...)
            c.JSON(http.StatusOK, gin.H{"message": "album deleted"})
            return
        }
    }
    c.JSON(http.StatusNotFound, gin.H{"message": "album not found"})
}

// @Summary Update an album
// @Description Update an album
// @Tags albums
// @Accept  json
// @Produce  json
// @Param id path string true "Album ID"
// @Param album body album true "Album"
// @Success 200 {object} album
// @Failure 404 {object} gin.H{"message": "album not found"}
// @Router /albums/{id} [put]
func updateAlbum(c *gin.Context) {
    id := c.Param("id")
    var updatedAlbum album

    // Bind JSON to updatedAlbum
    if err := c.BindJSON(&updatedAlbum); err != nil {
        return
    }

    for i, a := range albums {
        if a.ID == id {
            albums[i] = updatedAlbum
            c.JSON(http.StatusOK, updatedAlbum)
            return
        }
    }
    c.JSON(http.StatusNotFound, gin.H{"message": "album not found"})
}

func main() {
    router := gin.Default()

    // Swagger route
    router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

    router.GET("/albums", getAlbums)
    router.GET("/albums/:id", getAlbumByID)
    router.POST("/albums", postAlbums)
    router.PUT("/albums/:id", updateAlbum) // Add PUT route
    router.DELETE("/albums/:id", deleteAlbum) // Add DELETE route

    router.Run("localhost:8080")
}